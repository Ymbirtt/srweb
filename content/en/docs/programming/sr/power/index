//TITLE:	Power
//DESCRIPTION:	
//KEYWORDS:	
//CONTENT_TYPE:	markdown

Power
=====

There are a few things that can be done with the power board, namely changing user LEDs and beeping. As there is only one power board, it is not accessed like a list like `motors` for example:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
R.power.something...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[LEDs](/docs/programming/sr/power/#leds) {#leds}
------

There are 3 user-changeable LEDs on the power board, located at the bottom-left of the screen. They are numbered 0, 1 and 2 respectively. To turn an LED on, you set its value high (1); to turn it off, you set its value low (0):

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# turn LED 0 on
R.power.led[0] = 1

# turn LED 1 off
R.power.led[1] = 0

# to toggle LED 2, you can use
R.power.led[2] = not R.power.led[2]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Bear in mind that the last example (toggling) will read the value from the board before setting it again, which may be slow. If you're toggling an LED, it will be quicker to store its value in a variable somewhere.


[Beeping](/docs/programming/sr/power/#beeping) {#beeping}
-------

The power board can beep at frequencies ranging from 20Hz to 20000Hz. It can play one note at a time (monophonic) and notes can be queued.

### [Single Note](/docs/programming/sr/power/#single_note) {#single_note}

To produce a note at 440Hz (middle A) for half a second, you would use the following:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
R.power.beep(440, 0.5)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

### [Multiple Queued Notes](/docs/programming/sr/power/#multiple_notes) {#multiple_notes}

However, _R.power.beep()_ can also accept a list of tuples containing a frequency-duration pair; this allows for some Python tricks to be used to great effect:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# beep at 100Hz for 1s, then at 200Hz for 2s
R.power.beep( [(100, 1), (200, 2)] )

# ramp up from 100Hz to 1000Hz in 1s overall, with frequency jumps of 100Hz
R.power.beep( [ (x*100, 0.1) for x in range(1, 10) ] )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Please note that there is a **maximum queue size** of **10 notes** (frequency-duration pairs).


[Battery Status](/docs/programming/sr/power/#battery) {#battery}
-------

The power board can report both the battery voltage, in Volts, and the current being drawn from it, in Amps. You can access these values like so:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Print the battery voltage and current to the log
print R.power.battery.voltage, R.power.battery.current
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A fully charged battery will measure 12.6V. The power board will signal a low battery at 10.4V and turn off completely at 10V. The discharge curve is roughly linear between 11.4V and 10.4V.

Note that, due to a manufacturing defect, the current measurement function does not work (or at least won't work as expected) on the SR13.F board revision.
